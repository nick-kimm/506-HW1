---
title: "Problem Set 1"
author: Nicholas Kim
format: html

---
Link to my [github]("https://github.com/nick-kimm/Problem-Set-1") repository

Looked up some functions and syntax online to answer some questions. Ex. Syntax of if statement inside for loop and how to iterate through the digits in a number. 

##Problem 1

Part a: Loading data
```{r}
wine <- read.csv("/Users/nicholaskim/Documents/STAT 506/hw1/wine.data",header = FALSE)

wine_names <- list('Wine Type','Alchohol','Malic Acid','Ash','Alcalinity of Ash','Magnesium','Total Phenols','Flavanoids','Nonflavanoid Phenols','Proanthocyanins','Color Intensity','Hue','OD280/OD315','Proline' )

colnames(wine) <- wine_names

wine
```

Part b: Checking if count of wine type matches that noted in wine_name text file
```{r}
as.data.frame(table(wine$`Wine Type`))
```
From doc we expect to see 59 for Type 1, 71 for Type 2, and 48 for Type 3. From table above we can see it matches!

Part c: Q1. What is the correlation b/t alcohol and color intensity?
```{r}
cor(wine$Alchohol,wine$`Color Intensity`)
```
The correlation between these two variables is 54.64%

Q2. Which class has the highest correlation? Which has the lowest?
```{r}
#Color Intensity
cor(wine[1:59,11],wine[1:59,1])
cor(wine[60:131,11],wine[60:131,1])
cor(wine[132:178,11],wine[132:178,1])

#Alchohol
cor(wine[1:59,2],wine[1:59,1])
cor(wine[60:131,2],wine[60:131,1])
cor(wine[132:178,2],wine[132:178,1])
```
The Class with the highest correlation for both Color Intensity and Alchohol is Class 2 while the lowest is both Class 1 and 3 equally.

Q3. What is the alcohol content of the wine with the highest color intensity?
```{r}
for (x in 1:length(wine$`Wine Type`)){
  if (wine[x,11] == max(wine$`Color Intensity`)){
    alc = wine[x,2]
  }
}
alc
```
The alcohol content of the wine w/ the highest Color Intensity is 14.34%.

Q4. What percentage of wines had a higher content of proanthocyanins compare to ash?
```{r}
count = 0

for (x in 1:length(wine$`Wine Type`)){
  if (wine[x,10] > wine[x,4]){
    count = 1+count
  }
}

count/178*100
```
The percentage of wines that had a higher content of Proanthocyanins compared to Ash was 8.4%

Part d: Create a table identifying the average value of each variable, providing one row for the overall average, and one row per class with class averages.

Finding values for Overall Averages
```{r}
overall_avgs = list()

for (x in 1:14){
  overall_avgs[x] = mean(wine[,x])
}
```

Finding averages for each Wine Type respectively
```{r}
c1_avgs = list()

for (x in 2:14){
  c1_avgs[x] = mean(wine[1:59,x])
}

c2_avgs = list()
for (x in 2:14){
  c2_avgs[x] = mean(wine[60:131,x])
}

c3_avgs = list()

for (x in 2:14){
  c3_avgs[x] = mean(wine[132:178,x])
}
```

Matrix to form data is shape we want
````{r}
matrix(d = c(overall_avgs[2:14],c1_avgs[2:14],c2_avgs[2:14],c3_avgs[2:14]),nrow=4, ncol=13,
       dimnames=list(c("Overall Avg", "Type 1 Avg", "Type 2 Avg", "Type 3 Avg"),wine_names[2:14]))
```
Part e: Carry out a series of t-tests to examine whether the level of phenols differs across the three classes. Present the R output and interpret the results.

T-test for Wine Type 1
```{r}
p_avg = mean(wine[,7])

t.test(wine[1:59,7],mu=p_avg)
```
T-test Wine Type 2
```{r}
t.test(wine[60:131,7],mu=p_avg)
```
T-test Wine Type 3
```{r}
t.test(wine[132:178,7],mu=p_avg)
```


##Problem 2

Part a: Import the data into a data.frame in R. As with the wine data, you may download the data outside of your submission, but importation should take place inside the problem set submission.
```{r}
ask_man = read.csv("/Users/nicholaskim/Documents/STAT 506/HW1/AskAManager.csv")
```

Part b: Clean up the variable names. Simplify them.
```{r}
#removing repeating id col
ask_man = ask_man[,2:19]

colnames(ask_man) <- c("Timestamp","Age Range","Industry","Job","Job ext","Salary","Overtime Salary","Currency","Other Currency","Salary ext","Country","State","City","Yrs Exp","Exp in Field","Highest Degree","Gender","Race")
```

Part c: Restrict the data to those being paid in US dollars (USD). Show that it worked by confirming the number of observations before and after restricting the data.
```{r}
#before restriction
print("b/f restriction:") 
nrow(ask_man)

#after restriction
res_ask_man = ask_man[ask_man$Currency=="USD",]

print("a/f restriction:")
nrow(res_ask_man)
```

Part d: Assume no one starts working before age 18. Eliminate any rows for which their age, years of experience in their field, and years of experience total are impossible. Again, confirm the number of observations. (Hint: Making these variables factor may make your life easier.)

```{r}
#before restriction
print("b/f restriction:") 
nrow(ask_man)

#after restriction
true_index = list() #getting list of indexs that match the condition we want

for (i in 1:nrow(ask_man)){
  if (ask_man[i,2]=="18-24"){
    if (ask_man[i,15]=="5-7 years" & ask_man[i,14]=="5-7 years"){
      true_index[i] = i
    }
  }
  else if (ask_man[i,2]=="25-34"){
    if (ask_man[i,15]=="11 - 20 years" & ask_man[i,14]=="11-20 years"){
      true_index[i] = i
    }
    else if (ask_man[i,15]=="5-7 years" & ask_man[i,14]=="11-20 years"){
      true_index[i] = i
    }
    else if (ask_man[i,15]=="5-7 years" & ask_man[i,14]=="5-7 years"){
      true_index[i] = i
    }
  }
  else if (ask_man[i,2]=="35-44"){
    if (ask_man[i,15]=="21 - 30 years" & ask_man[i,14]=="21-30 years"){
      true_index[i] = i
    }
    else if (ask_man[i,15]=="11-20 years" & ask_man[i,14]=="21-30 years"){
      true_index[i] = i
    }
    else if (ask_man[i,15]=="11-20 years" & ask_man[i,14]=="11-20 years"){
      true_index[i] = i
    }
  }
  else if (ask_man[i,2]=="45-54"){
    if (ask_man[i,15]=="31 - 40 years" & ask_man[i,14]=="31-40 years"){
      true_index[i] = i
    }
    else if (ask_man[i,15]=="21-30 years" & ask_man[i,14]=="31-40 years"){
      true_index[i] = i
    }
    else if (ask_man[i,15]=="21-30 years" & ask_man[i,14]=="21-30 years"){
      true_index[i] = i
    }
  }
  else if (ask_man[i,2]=="55-64"){
    if (ask_man[i,15]=="41 years or more" & ask_man[i,14]=="41 years or more"){
      true_index[i] = i
    }
    else if (ask_man[i,15]=="31-40 years" & ask_man[i,14]=="41 years or more"){
      true_index[i] = i
    }
    else if (ask_man[i,15]=="31-40 years" & ask_man[i,14]=="31-40 years"){
      true_index[i] = i
    }
  }
  else if (ask_man[i,2]=="64 or over"){
    if (ask_man[i,15]=="41 years or more" & ask_man[i,14]=="41 years or more"){
      true_index[i] = i
    }
  }
  else{}
}

#creating sep dataframe with only indexs that are true
res2_ask_man = ask_man[true_index!="NULL",]

print("a/f restriction:")
nrow(res2_ask_man)
```
Part e: A lot of the incomes are likely false. Eliminate any rows with extremely low or extremely high salaries. Iâ€™ll leave the decision of what thresholds to use up to you; you could choose to eliminate only impossible values, or you could restrict the sample to eliminate the extreme values even if they are realistic (e.g. removing the billionaires or the folks making < $1,000 per year). You must justify your choice, along with either a cited source or an exploration the data, or some combination.

```{r}
#First filter the data set of just USD currency folks by age ranges to get their avg salary within each bucket
l18 = res_ask_man[res_ask_man$`Age Range`=="under 18",]
l18_24 = res_ask_man[res_ask_man$`Age Range`=="18-24",]
l25_34 = res_ask_man[res_ask_man$`Age Range`=="25-34",]
l35_44 = res_ask_man[res_ask_man$`Age Range`=="35-44",]
l45_54 = res_ask_man[res_ask_man$`Age Range`=="45-54",]
l55_64 = res_ask_man[res_ask_man$`Age Range`=="55-64",]
l65 = res_ask_man[res_ask_man$`Age Range`=="65 or over",]

#store index's of rows that match our condition (we don't want to store these in final)
indexs = list()

for (i in 1:nrow(res_ask_man)){
  if (res_ask_man[i,2]=="under 18"){
    if ((res_ask_man[i,6]-mean(l18$Salary))/sd(l18$Salary)>2){
      indexs[i] = i
    }
    else if ((res_ask_man[i,6]-mean(l18$Salary))/sd(l18$Salary)<0){
      indexs[i] = i
    }
  }
  else if (res_ask_man[i,2]=="18-24"){
    if ((res_ask_man[i,6]-mean(l18_24$Salary))/sd(l18_24$Salary)>2){
      indexs[i] = i
    }
    else if ((res_ask_man[i,6]-mean(l18_24$Salary))/sd(l18_24$Salary)<0){
      indexs[i] = i
    }
  }
  else if (res_ask_man[i,2]=="25-34"){
    if ((res_ask_man[i,6]-mean(l25_34$Salary))/sd(l25_34$Salary)>2){
      indexs[i] = i
    }
    else if ((res_ask_man[i,6]-mean(l25_34$Salary))/sd(l25_34$Salary)<0){
      indexs[i] = i
    }
  }
  else if (res_ask_man[i,2]=="35-44"){
    if ((res_ask_man[i,6]-mean(l35_44$Salary))/sd(l35_44$Salary)>2){
      indexs[i] = i
    }
    else if ((res_ask_man[i,6]-mean(l35_44$Salary))/sd(l35_44$Salary)<0){
      indexs[i] = i
    }
  }
  else if (res_ask_man[i,2]=="45-54"){
    if ((res_ask_man[i,6]-mean(l45_54$Salary))/sd(l45_54$Salary)>2){
      indexs[i] = i
    }
    else if ((res_ask_man[i,6]-mean(l45_54$Salary))/sd(l45_54$Salary)<0){
      indexs[i] = i
    }
  }
  else if (res_ask_man[i,2]=="55-64"){
    if ((res_ask_man[i,6]-mean(l55_64$Salary))/sd(l55_64$Salary)>2){
      indexs[i] = i
    }
    else if ((res_ask_man[i,6]-mean(l55_64$Salary))/sd(l55_64$Salary)<0){
      indexs[i] = i
    }
  }
  else if (res_ask_man[i,2]=="65 or over"){
    if ((res_ask_man[i,6]-mean(l65$Salary))/sd(l65$Salary)>2){
      indexs[i] = i
    }
    else if ((res_ask_man[i,6]-mean(l65$Salary))/sd(l65$Salary)<0){
      indexs[i] = i
    }
  }
}

non_outliers = res_ask_man[indexs=="NULL",]
```

With this approach we are filtering out any Salaries that are extremely large (larger than 2 standard deviations) in the context of their age group and any values where the Salary is zero. The reasoning being we are able to contextualize their salary with a larger sample and see how far away from the average they are. The 2 was arbitrarily set. 
  
##Problem 3

Part a: Write function isPalindromic that checks if a given positive integer is a palindrome. Be sure to provide a reasonable error on an invalid input. Be sure to document your function (see instructions above).

Input: A positive integer
Output: A list with two elements:
isPalindromic: A logical value indicating if the input is palindromic.
reversed: The input with its digits reversed.

```{r}
isPalindromic <- function(x){
  #first convert x a number to a str so we can break it down by its digits
  digits <- unlist(strsplit(as.character(x), ""))
  
  forward = list()
  backward = list()
  for (i in digits){
    forward[i] = i
  }
  for (i in digits){
    backward[i] = i
  }
  return(digits)
  return(forward)
  return(backward)
  #for (i in 1:length(forward)){
    #if (forward==backward){
      #return(TRUE)
    #}
    #else{
      #return(FALSE)
    #}
  #}
}
```

```{r}
isPalindromic(728827)
```

```{r}
test = 
```
